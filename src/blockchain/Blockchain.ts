import { Wallet } from "ethers";
import { Transaction } from "./Transaction";
import { Block } from "./Block";

export class Blockchain {
    chain: Block[];
    difficulty: number;
    pendingTransactions: Transaction[];
    miningThreshold: number;
    balances: Map<string, number>; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è

    constructor() {
        this.chain = [this.createGenesisBlock()];
        this.difficulty = 4;
        this.pendingTransactions = [];
        this.miningThreshold = 5;
        this.balances = new Map<string, number>(); // –ë–∞–ª–∞–Ω—Å–∏ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤
        console.log("‚úÖ –õ–∞–Ω—Ü—é–≥ –±–ª–æ–∫—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");
    }

    createGenesisBlock(): Block {
        const newBlock = new Block(0, [], "0");
        console.log("üü¢ –ì–µ–Ω–µ–∑–∏—Å-–±–ª–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ.");
        return newBlock;
    }

    getLastBlock(): Block {
        const lastBlock = this.chain[this.chain.length - 1];
        console.log("üîé –û—Å—Ç–∞–Ω–Ω—ñ–π –±–ª–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ:", lastBlock.index);
        return lastBlock;
    }
    
    addTransaction(transaction: Transaction): void {
        console.log(`‚ûï –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤—ñ–¥ ${transaction.sender} –¥–æ ${transaction.receiver} –Ω–∞ —Å—É–º—É ${transaction.amount}`);
        if ((this.balances.get(transaction.sender) || 0) < transaction.amount) {
            throw new Error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.");
        }
        this.balances.set(transaction.sender, this.balances.get(transaction.sender)! - transaction.amount);
        this.balances.set(transaction.receiver, (this.balances.get(transaction.receiver) || 0) + transaction.amount);
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –¥–æ–¥–∞–Ω–∞. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: ${this.balances.get(transaction.sender)}`);
        
        this.pendingTransactions.push(transaction);
        if (this.pendingTransactions.length >= this.miningThreshold) {
            this.minePendingTransactions();
        }
    }

    createWallet(): { address: string; privateKey: string } {
        const wallet = Wallet.createRandom();
        console.log(`üéâ –°—Ç–≤–æ—Ä–µ–Ω–æ –≥–∞–º–∞–Ω–µ—Ü—å: ${wallet.address}`);
        return {
            address: wallet.address,
            privateKey: wallet.privateKey
        };
    }

    getBalance(address: string): number {
        const balance = this.balances.get(address) || 0;
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –¥–ª—è ${address}: ${balance}`);
        return balance;
    }    

    addBalance(address: string, amount: number): void {
        const currentBalance = this.balances.get(address) || 0;
        this.balances.set(address, currentBalance + amount);
        console.log(`‚úÖ –î–æ–¥–∞–Ω–æ ${amount} –¥–æ –±–∞–ª–∞–Ω—Å—É –∞–¥—Ä–µ—Å–∏ ${address}. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: ${this.balances.get(address)}`);
    }

    minePendingTransactions(): void {
        console.log("‚õèÔ∏è –ü–æ—á–∞—Ç–æ–∫ –º–∞–π–Ω—ñ–Ω–≥—É...");
        const newBlock = new Block(this.getLastBlock().index + 1, this.pendingTransactions, this.getLastBlock().hash);
        newBlock.mineBlock(this.difficulty);
        this.chain.push(newBlock);
        console.log(`üü¢ –ë–ª–æ–∫ –∑ —ñ–Ω–¥–µ–∫—Å–æ–º ${newBlock.index} –¥–æ–¥–∞–Ω–æ –¥–æ –ª–∞–Ω—Ü—é–≥–∞.`);
        this.pendingTransactions = [];
    }

    validateChain(): boolean {
        console.log("üîç –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–Ω—Ü—é–≥–∞...");
        for (let i = 1; i < this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];
    
            if (currentBlock.hash !== currentBlock.calculateHash()) {
                console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: –•–µ—à –±–ª–æ–∫—É ${currentBlock.index} —î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º.`);
                return false;
            }
    
            if (currentBlock.previousHash !== previousBlock.hash) {
                console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ö–µ—à –¥–ª—è –±–ª–æ–∫—É ${currentBlock.index} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.`);
                return false;
            }
        }
        console.log("‚úÖ –õ–∞–Ω—Ü—é–≥ –±–ª–æ–∫—ñ–≤ –≤–∞–ª—ñ–¥–Ω–∏–π.");
        return true;
    }
}
